version: '3'
services: 
  gateway:
    restart: always
    build:
      context: ./API_Gateway
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      - userDB
      - courseDB
      - paymentDB
      - certificateDB
      - companyDB
      - planDB
    networks:
      - red-local
    #description: Gateway API service para direccionar las solicitudes a la API correspondiente

  user:
    restart: always
    build:
      context: ./API_User
      dockerfile: Dockerfile
    ports:
      - '3001:3001'
    depends_on:
      - userDB
    networks:
      - red-local
    #description: User API service 

  userDB:
    image: mongo
    ports:
      - '27020:27017'
    volumes:
      # -  user-db-data:/data/db
        - ./Data/User:/data/db
    networks:
      - red-local
    #description: Base de datos para User API service 

  course:
    restart: always
    build:
      context: ./API_Course
      dockerfile: Dockerfile
    ports:
      - '3002:3002'
    depends_on:
      - courseDB
    networks:
      - red-local
    #description: Course API service 

  courseDB:
    image: mariadb
    environment:
      - MYSQL_ROOT_PASSWORD=contraseña
      - MYSQL_DATABASE=Courses
    ports:
      - '3307:3306'
    volumes:
      - ./Scripts_DBS/initCourse.sql:/docker-entrypoint-initdb.d/initCourse.sql
     #- course-db-data:/var/lib/mysql
      - ./Data/Course:/var/lib/mysql
    networks:
      - red-local
    #description: Base de datos para Course API service 

  payment:
    restart: always
    build:
      context: ./API_Payment
      dockerfile: Dockerfile
    ports:
      - '3003:3003'
    depends_on:
      - paymentDB
    networks:
      - red-local
    #description: Payment API service 


  paymentDB:
    image: mariadb
    environment:
      - MYSQL_ROOT_PASSWORD=contraseña
      - MYSQL_DATABASE=Payments
    ports:
      - '3306:3306'
    volumes:
      - ./Scripts_DBS/initPayment.sql:/docker-entrypoint-initdb.d/initPayment.sql
     #- payment-db-data:/var/lib/mysql
      - ./Data/Payment:/var/lib/mysql
    networks:
      - red-local
    #description: Base de datos para Payment API service 


  certificate:
    restart: always
    build:
      context: ./API_Certificate
      dockerfile: Dockerfile
    ports:
      - '3004:3004'
    depends_on:
      - certificateDB
    networks:
      - red-local
    #description: Certificate API service 


  certificateDB:
    image: mongo
    ports:
      - '27022:27017'
    volumes:
       #- certificate-db-data:/data/db
        - ./Data/Certificate:/data/db
    networks:
      - red-local
    #description: Base de datos para Certificate API service 

    
  company:
    restart: always
    build:
      context: ./API_Company
      dockerfile: Dockerfile
    ports:
      - '3005:3005'
    depends_on:
      - companyDB
    networks:
      - red-local
    #description: Company API service 


  companyDB:
    image: mongo
    ports:
      - '27021:27017'
    volumes:
    # - company-db-data:/data/db
      - ./Data/Company:/data/db
    networks:
      - red-local
    #description: Base de datos para Company API service 


  plan:
    restart: always
    build:
      context: ./API_Plan
      dockerfile: Dockerfile
    ports:
      - '3006:3006'
    depends_on:
      - planDB
    networks:
      - red-local
    #description: Plan API service 


  planDB:
    image: mariadb
    environment:
      - MYSQL_ROOT_PASSWORD=contraseña
      - MYSQL_DATABASE=Plans
    ports:
      - '3308:3306'
    volumes:
      - ./Scripts_DBS/initPlan.sql:/docker-entrypoint-initdb.d/initPlan.sql
    # - plan-db-data:/var/lib/mysql
      - ./Data/Plan:/var/lib/mysql
    networks:
      - red-local
    #description: Base de datos para Plan API service 



   
networks:
  red-local:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16
          gateway: 172.25.0.1

volumes:
  user-db-data:
  course-db-data:
  payment-db-data:
  plan-db-data:
  company-db-data:
  certificate-db-data:
